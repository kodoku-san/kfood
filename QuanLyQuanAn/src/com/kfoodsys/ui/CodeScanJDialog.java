package com.kfoodsys.ui;

import com.formdev.flatlaf.FlatIntelliJLaf;
import com.github.sarxos.webcam.Webcam;
import com.github.sarxos.webcam.WebcamDiscoveryService;
import com.github.sarxos.webcam.WebcamPanel;
import com.github.sarxos.webcam.WebcamResolution;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.NotFoundException;
import com.google.zxing.Result;
import com.google.zxing.client.j2se.BufferedImageLuminanceSource;
import com.google.zxing.common.HybridBinarizer;
import com.kfoodsys.dao.NhanVienDAO;
import com.kfoodsys.entity.KhoNguyenLieu;
import com.kfoodsys.entity.NhanVien;
import com.kfoodsys.utils.Auth;
import com.kfoodsys.utils.MsgBox;
import com.kfoodsys.utils.XDate;
import com.kfoodsys.utils.XGenCode;
import com.kfoodsys.utils.XImage;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.util.Date;
import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.ThreadFactory;
import javax.swing.UIManager;
import org.apache.log4j.BasicConfigurator;

/**
 *
 * @author phuho
 */
public class CodeScanJDialog extends javax.swing.JDialog implements Runnable, ThreadFactory {

    /**
     * Creates new form QRScanJDialog
     */
    public CodeScanJDialog(java.awt.Frame parent, boolean modal, int tp) {
        super(parent, modal);
        initComponents();
        this.tp = tp;
        initWebcam();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneBG = new javax.swing.JPanel();
        paneCamera = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Scan QR/Bar Code - KFood");
        setAlwaysOnTop(true);
        setUndecorated(true);
        setResizable(false);

        paneBG.setBackground(new java.awt.Color(255, 255, 255));

        paneCamera.setBackground(new java.awt.Color(250, 250, 250));
        paneCamera.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(230, 230, 230)));

        javax.swing.GroupLayout paneCameraLayout = new javax.swing.GroupLayout(paneCamera);
        paneCamera.setLayout(paneCameraLayout);
        paneCameraLayout.setHorizontalGroup(
            paneCameraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 598, Short.MAX_VALUE)
        );
        paneCameraLayout.setVerticalGroup(
            paneCameraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 51));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/kfoodsys/icons/icons8-qr-code-20.png"))); // NOI18N
        jLabel1.setText("Di chuyển mã QR đến camera để quét");

        jButton1.setBackground(new java.awt.Color(255, 102, 102));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/kfoodsys/icons/icons8-exit-20.png"))); // NOI18N
        jButton1.setText("Thoát");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout paneBGLayout = new javax.swing.GroupLayout(paneBG);
        paneBG.setLayout(paneBGLayout);
        paneBGLayout.setHorizontalGroup(
            paneBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneBGLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(paneBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(paneBGLayout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(paneCamera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33))
        );
        paneBGLayout.setVerticalGroup(
            paneBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, paneBGLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(paneBGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(paneCamera, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneBG, javax.swing.GroupLayout.PREFERRED_SIZE, 610, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(paneBG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        resetQR();
        if (tp == 1) {
            new DangNhapJDialog(null, true).setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(new FlatIntelliJLaf());
        } catch (Exception e) {
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CodeScanJDialog dialog = new CodeScanJDialog(new javax.swing.JFrame(), true, -1);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel paneBG;
    private javax.swing.JPanel paneCamera;
    // End of variables declaration//GEN-END:variables

    private WebcamPanel panel = null;
    private Webcam webcam = null;
    private NhanVienDAO dao = new NhanVienDAO();
    private Executor executor = Executors.newSingleThreadExecutor(this);
    private int tp;
    private boolean exit = true;

    private void initWebcam() {
        setIconImage(XImage.getAppIcon());
        BasicConfigurator.configure();
        Dimension size = WebcamResolution.QVGA.getSize();
        webcam = Webcam.getWebcams().get(0);
        webcam.setViewSize(size);
        webcam.open();

        panel = new WebcamPanel(webcam);
        panel.setPreferredSize(size);
        panel.setFPSDisplayed(true);
        panel.setSize(600, 400);

        paneCamera.add(panel);

        executor.execute(this);
        try {

        } catch (Exception e) {
        }
    }

    @Override
    public void run() {
        do {
            try {
                Thread.sleep(274);
            } catch (InterruptedException e) {

            }
            Result result = null;
            BufferedImage image = null;
            if (webcam.isOpen()) {
                if ((image = webcam.getImage()) == null) {
                    continue;
                }
            }
            if (image != null) {
                LuminanceSource source = new BufferedImageLuminanceSource(image);
                BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
                try {
                    result = new MultiFormatReader().decode(bitmap);
                } catch (NotFoundException e) {
                    
                }
            }

            if (result != null) {
//                MsgBox.alert(this, result.getText());
                if (tp == 0 && result.getText().contains("khonguyenlieuKFood16092002|")) {
                    Toolkit.getDefaultToolkit().beep();
                    setKho(result.getText());
                } else if (tp == 1) {
                    String[] info = result.getText().split("___");
                    if (info.length == 2) {
                        Toolkit.getDefaultToolkit().beep();
                        login(info[0], info[1]);
                    }
                } else if (tp == 2) {
                    String idBill = result.getText().substring(3);
                    int t = Integer.parseInt(idBill);
                    if(result.getText().contains("169") && idBill.length() == 6) {
                        Toolkit.getDefaultToolkit().beep();
                        XGenCode.IdBillByBC = t;
                        resetQR();
                    }
                }
            }
        } while (exit);
    }
    
    public void stop() {
        exit = false;
    }

    Thread t;
    @Override
    public Thread newThread(Runnable r) {
        try {
            t = new Thread(r, "QRThread" + XDate.toString(new Date(), "HHmmss"));
            t.setDaemon(true);
            return t;
        } catch (Exception e) {
            return null;
        }
    }

    public void login(String taiKhoan, String matKhau) {
        if (taiKhoan.length() == 0 || matKhau.length() == 0) {
            MsgBox.alert(this, "Vui lòng nhập đủ thông tin!");
        } else {
            NhanVien nhanVien = dao.selectByTaiKhoan(taiKhoan);
            if (nhanVien == null) {
                MsgBox.alert(this, "Tên đăng nhập không tồn tại!");
            } else if (!matKhau.equals(nhanVien.getMatKhau())) {
                MsgBox.alert(this, "Sai mật khẩu!");
            } else {
                Auth.user = nhanVien;
                resetQR();
            }
        }
    }

    public void setKho(String kho) {
        kho = kho.replace("khonguyenlieuKFood16092002|", "");
        String[] khoQR = kho.split("\\|");
        XGenCode.khoNguyenLieu = new KhoNguyenLieu();
        XGenCode.khoNguyenLieu.setIdKho(khoQR[0]);
        XGenCode.khoNguyenLieu.setTenNL(khoQR[1]);
        XGenCode.khoNguyenLieu.setSoLuong(0);
        XGenCode.khoNguyenLieu.setDonVi(khoQR[2]);
        XGenCode.khoNguyenLieu.setTenDanhMuc(khoQR[3]);
        resetQR();
    }

    public void resetQR() {
        webcam.close();
        WebcamDiscoveryService discovery = Webcam.getDiscoveryService();
        discovery.stop();
        new Thread() {
            public void run() {
                try {
                    Thread.sleep(100);
                } catch (Exception e) {
                }
                t.stop();
            }
        }.start();
        this.dispose();
    }
}
